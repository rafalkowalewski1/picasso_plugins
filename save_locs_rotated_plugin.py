import copy
import numpy as np

from PyQt5 import QtWidgets

from ... import io, render

LOCS_DTYPE = [
	("frame", "u4"),
	("x", "f4"),
	("y", "f4"),
	("photons", "f4"),
	("sx", "f4"),
	("sy", "f4"),
	("bg", "f4"),
	("lpx", "f4"),
	("lpy", "f4"),
	("net_gradient", "f4"),
	("ellipticity", "f4"),
	("z", "f4"),
]

class Plugin():
	def __init__(self, window):
		self.name = "render"
		self.window = window
		self.view_rot = self.window.window_rot.view_rot

	def execute(self):
		file_menu = self.window.window_rot.menus[0]
		file_menu.addSeparator()

		save_rot_action = file_menu.addAction("Save rotated locs")
		save_rot_action.triggered.connect(self.save_rot)

	def save_rot(self):
		# get anglesof rotation
		angx = int(self.view_rot.angx * 180 / np.pi)
		angy = int(self.view_rot.angy * 180 / np.pi)
		angz = int(self.view_rot.angz * 180 / np.pi)

		# get channel
		channel = self.window.view.get_channel_all_at_once(
			"save rotateted locs"
		)

		if channel is not None:
			if channel == len(self.view_rot.paths):
				suffix, ok = QtWidgets.QInputDialog.getText(
					self.view_rot,
					"",
					"Enter suffix",
					QtWidgets.QLineEdit.Normal,
					f"_rotated_{angx}_{angy}_{angz}",
				)
				if ok:
					for channel in range(len(self.view_rot.paths)):
						path = self.view_rot.paths[channel].replace(
							".hdf5", f"{suffix}.hdf5"
						)
						self._save_rot(channel, path)
			else:
				path, ext = QtWidgets.QFileDialog.getSaveFileName(
					self.view_rot,
					"save rotate locs",
					self.view_rot.paths[channel].replace(
						".hdf5", f"_rotated_{angx}_{angy}_{angz}.hdf5"
					),
					filter="*hdf5",
				)
				if path:
					self._save_rot(channel, path)

	def _save_rot(self, channel, path):
		# get angles for rotation
		angx = self.view_rot.angx
		angy = self.view_rot.angy
		angz = self.view_rot.angz

		locs = copy.copy(self.window.view.all_locs[channel])
		info = copy.copy(self.window.view.infos[channel])

		# rotate locs 
		x, y, in_view, z = render.locs_rotation(
			locs=locs,
			oversampling=1,
			x_min=0,
			x_max=info[0]["Width"],
			y_min=0,
			y_max=info[0]["Height"],
			ang=(angx, angy, angz),
		)

		# rotate locs prec #todo
		lpx = locs.lpx[in_view]
		lpy = locs.lpy[in_view]

		# save locs
		new_locs = np.rec.array(
			(
				locs.frame[in_view],
				x,
				y,
				locs.photons[in_view],
				locs.sx[in_view],
				locs.sy[in_view],
				locs.bg[in_view],
				lpx,
				lpy,
				locs.net_gradient[in_view],
				locs.ellipticity[in_view],
				z
			),
			dtype=LOCS_DTYPE,
		)


		info += [{
			"Generated by": "Picasso Render 3D",
			"Original file": self.view_rot.paths[channel],
			"Rotation angles (radians)": [angx, angy, angz],
		}]
		io.save_locs(path, new_locs, info)
